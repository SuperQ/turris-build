From 938cc9e96cac33faf895f6b2ff680f9a04958817 Mon Sep 17 00:00:00 2001
From: Michal Hrusecky <michal.hrusecky@nic.cz>
Date: Fri, 3 May 2019 16:38:11 +0200
Subject: [PATCH] lxc: Update to version 3.0.3 and prefer Turris servers

09/12/19 Changed:
Makefile
- Use correct SPDX License Identifier
- Change install sections so now CP is just on one row instead of
three/four.
- Changed website

Backport patch which fixes CVE-2019-5736
---
 utils/lxc/Makefile                            |  77 +---
 utils/lxc/files/systemd-workaround            |   4 +
 ...01-nl-avoid-NULL-pointer-dereference.patch |  37 --
 utils/lxc/patches/002-compile.patch           |  10 -
 utils/lxc/patches/003-compile.patch           |  11 -
 utils/lxc/patches/010-compile.patch           |  37 --
 utils/lxc/patches/020-lxc-checkconfig.patch   |   4 +-
 .../025-remove-unsupported-option.patch       |  20 +-
 utils/lxc/patches/030-prlimit.patch           |  95 -----
 utils/lxc/patches/030-turris-servers.patch    |   6 +-
 utils/lxc/patches/040-fix-CVE-2019-5736.patch | 398 ++++++++++++++++++
 11 files changed, 435 insertions(+), 264 deletions(-)
 create mode 100644 utils/lxc/files/systemd-workaround
 delete mode 100644 utils/lxc/patches/001-nl-avoid-NULL-pointer-dereference.patch
 delete mode 100644 utils/lxc/patches/002-compile.patch
 delete mode 100644 utils/lxc/patches/003-compile.patch
 delete mode 100644 utils/lxc/patches/010-compile.patch
 delete mode 100644 utils/lxc/patches/030-prlimit.patch
 create mode 100644 utils/lxc/patches/040-fix-CVE-2019-5736.patch

diff --git a/utils/lxc/Makefile b/utils/lxc/Makefile
index f22b4f3..12ad5eb 100644
--- a/utils/lxc/Makefile
+++ b/utils/lxc/Makefile
@@ -8,17 +8,16 @@
 include $(TOPDIR)/rules.mk
 
 PKG_NAME:=lxc
-PKG_VERSION:=2.1.1
-PKG_RELEASE:=5
+PKG_VERSION:=3.0.3
+PKG_RELEASE:=2
 
 PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
 PKG_SOURCE_URL:=https://linuxcontainers.org/downloads/lxc/
-PKG_HASH:=68663a67450a8d6734e137eac54cc7077209fb15c456eec401a2c26e6386eff6
+PKG_HASH:=620cb832cc02c63bf4d330657bf6176544e145da281ee384a34d689635a19841
 
 PKG_LICENSE:=LGPL-2.1-or-later BSD-2-Clause GPL-2.0
 PKG_MAINTAINER:=Marko Ratkaj <marko.ratkaj@sartura.hr>
 
-PKG_BUILD_DEPENDS:=lua
 PKG_BUILD_PARALLEL:=1
 
 PKG_INSTALL:=1
@@ -45,7 +44,7 @@ define Package/lxc/Default
   SECTION:=utils
   CATEGORY:=Utilities
   TITLE:=LXC userspace tools
-  URL:=http://lxc.sourceforge.net/
+  URL:=https://linuxcontainers.org/
 endef
 
 define Package/lxc
@@ -127,12 +126,6 @@ define Package/liblxc
   DEPENDS:= lxc +libcap +libpthread +LXC_SECCOMP:libseccomp
 endef
 
-define Package/lxc-lua
-  $(call Package/lxc/Default)
-  TITLE:=LXC Lua bindings
-  DEPENDS:= lxc +liblua +liblxc
-endef
-
 define Package/lxc-init
   $(call Package/lxc/Default)
   TITLE:=LXC Lua bindings
@@ -141,14 +134,13 @@ endef
 
 CONFIGURE_ARGS += \
 	--disable-apparmor \
-	--disable-cgmanager \
 	--disable-doc \
 	--disable-examples \
 	--disable-gnutls \
 	--disable-selinux \
-	--disable-python \
-	--enable-lua=yes \
-	--with-lua-pc="$(STAGING_DIR)/usr/lib/pkgconfig/lua.pc"
+	--with-distro=gentoo \
+	--with-runtime-path=/var/run \
+	--with-config-path=/srv/lxc
 
 ifeq ($(CONFIG_LXC_SECCOMP),y)
 CONFIGURE_ARGS += --enable-seccomp
@@ -156,11 +148,6 @@ else
 CONFIGURE_ARGS += --disable-seccomp
 endif
 
-MAKE_FLAGS += \
-	LUA_INSTALL_CMOD="/usr/lib/lua" \
-	LUA_INSTALL_LMOD="/usr/lib/lua"
-
-
 define Build/InstallDev
 	$(INSTALL_DIR) $(1)/usr/include/lxc/
 	$(CP) \
@@ -198,72 +185,44 @@ endef
 
 define Package/lxc-common/install
 	$(INSTALL_DIR) $(1)/usr/lib/lxc/rootfs
-	$(CP) \
-		$(PKG_INSTALL_DIR)/usr/lib/lxc/rootfs/README \
-		$(1)/usr/lib/lxc/rootfs/
+	$(CP) $(PKG_INSTALL_DIR)/usr/lib/lxc/rootfs/README $(1)/usr/lib/lxc/rootfs/
 
 	$(INSTALL_DIR) $(1)/usr/share/lxc
-	$(CP) \
-		$(PKG_INSTALL_DIR)/usr/share/lxc/lxc.functions \
-		$(1)/usr/share/lxc/
+	$(CP) $(PKG_INSTALL_DIR)/usr/share/lxc/lxc.functions $(1)/usr/share/lxc/
 
 	$(INSTALL_DIR) $(1)/etc/lxc/
-	$(CP) \
-		$(PKG_INSTALL_DIR)/etc/lxc/default.conf \
-		$(1)/etc/lxc/default.conf
+	$(CP) $(PKG_INSTALL_DIR)/etc/lxc/default.conf $(1)/etc/lxc/default.conf
 
 	$(INSTALL_DIR) $(1)/etc/lxc/
-	$(CP) \
-		./files/lxc.conf \
-		$(1)/etc/lxc/lxc.conf
+	$(CP) ./files/lxc.conf $(1)/etc/lxc/lxc.conf
 
 	$(INSTALL_DIR) $(1)/srv/lxc/
 endef
 
 define Package/lxc-hooks/install
 	$(INSTALL_DIR) $(1)/usr/share/lxc/hooks
-	$(CP) \
-		$(PKG_INSTALL_DIR)/usr/share/lxc/hooks/* \
-		$(1)/usr/share/lxc/hooks/
+	$(CP) $(PKG_INSTALL_DIR)/usr/share/lxc/hooks/* $(1)/usr/share/lxc/hooks/
+	$(INSTALL_BIN) files/systemd-workaround $(1)/usr/share/lxc/hooks/
 endef
 
 define Package/lxc-templates/install
 	$(INSTALL_DIR) $(1)/usr/share/lxc/templates/
-	$(CP) \
-		$(PKG_INSTALL_DIR)/usr/share/lxc/templates/lxc-* \
-		$(1)/usr/share/lxc/templates/
+	$(CP) $(PKG_INSTALL_DIR)/usr/share/lxc/templates/lxc-* $(1)/usr/share/lxc/templates/
 endef
 
 define Package/lxc-configs/install
 	$(INSTALL_DIR) $(1)/usr/share/lxc/config/
-	$(CP) \
-		$(PKG_INSTALL_DIR)/usr/share/lxc/config/* \
-		$(1)/usr/share/lxc/config/
+	$(CP) $(PKG_INSTALL_DIR)/usr/share/lxc/config/* $(1)/usr/share/lxc/config/
 endef
 
 define Package/liblxc/install
 	$(INSTALL_DIR) $(1)/usr/lib/
-	$(CP) \
-		$(PKG_INSTALL_DIR)/usr/lib/liblxc.so* \
-		$(1)/usr/lib/
-endef
-
-define Package/lxc-lua/install
-	$(INSTALL_DIR) $(1)/usr/lib/lua
-	$(CP) \
-		$(PKG_INSTALL_DIR)/usr/share/lua/5.1/lxc.lua \
-		$(1)/usr/lib/lua/
-	$(INSTALL_DIR) $(1)/usr/lib/lua/lxc
-	$(CP) \
-		$(PKG_INSTALL_DIR)/usr/lib/lua/5.1/lxc/core.so \
-		$(1)/usr/lib/lua/lxc/
+	$(CP) $(PKG_INSTALL_DIR)/usr/lib/liblxc.so* $(1)/usr/lib/
 endef
 
 define Package/lxc-init/install
 	$(INSTALL_DIR) $(1)/sbin
-	$(CP) \
-		$(PKG_INSTALL_DIR)/usr/sbin/init.lxc \
-		$(1)/sbin/
+	$(CP) $(PKG_INSTALL_DIR)/usr/sbin/init.lxc $(1)/sbin/
 endef
 
 define GenPlugin
@@ -283,14 +242,12 @@ define GenPlugin
   $$(eval $$(call BuildPackage,lxc-$(1)))
 endef
 
-
 $(eval $(call BuildPackage,lxc))
 $(eval $(call BuildPackage,lxc-common))
 $(eval $(call BuildPackage,lxc-hooks))
 $(eval $(call BuildPackage,lxc-configs))
 $(eval $(call BuildPackage,lxc-templates))
 $(eval $(call BuildPackage,liblxc))
-$(eval $(call BuildPackage,lxc-lua))
 $(eval $(call BuildPackage,lxc-init))
 $(eval $(call BuildPackage,lxc-auto))
 $(eval $(call BuildPackage,lxc-unprivileged))
diff --git a/utils/lxc/files/systemd-workaround b/utils/lxc/files/systemd-workaround
new file mode 100644
index 0000000..2e343dc
--- /dev/null
+++ b/utils/lxc/files/systemd-workaround
@@ -0,0 +1,4 @@
+#!/bin/sh
+[ -d /sys/fs/cgroup/systemd ] || {
+mkdir /sys/fs/cgroup/systemd && mount -t cgroup -o none,name=systemd systemd /sys/fs/cgroup/systemd/
+}
diff --git a/utils/lxc/patches/001-nl-avoid-NULL-pointer-dereference.patch b/utils/lxc/patches/001-nl-avoid-NULL-pointer-dereference.patch
deleted file mode 100644
index 4c402a0..0000000
--- a/utils/lxc/patches/001-nl-avoid-NULL-pointer-dereference.patch
+++ /dev/null
@@ -1,37 +0,0 @@
-From c8f05589644d6b719e5a2c7fc548604f248be9be Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Rafa=C5=82=20Mi=C5=82ecki?= <rafal@milecki.pl>
-Date: Sun, 29 Jul 2018 17:44:06 +0200
-Subject: [PATCH] nl: avoid NULL pointer dereference
-MIME-Version: 1.0
-Content-Type: text/plain; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-
-It's a valid case to call nla_put() with NULL data and 0 len. It's done e.g. in
-the nla_put_attr().
-
-There has to be a check for data in nla_put() as passing NULL to the memcpy()
-is not allowed. Even if length is 0, both pointers have to be valid.
-
-For a reference see C99 standard (7.21.1/2), it says: "pointer arguments on
-such a call shall still have valid values".
-
-Reported-by: Daniel Gimpelevich <daniel@gimpelevich.san-francisco.ca.us>
-Signed-off-by: Rafał Miłecki <rafal@milecki.pl>
-[christian.brauner@ubuntu.com: adapted commit message]
-Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
----
- src/lxc/nl.c | 3 ++-
- 1 file changed, 2 insertions(+), 1 deletion(-)
-
---- a/src/lxc/nl.c
-+++ b/src/lxc/nl.c
-@@ -61,7 +61,8 @@ static int nla_put(struct nlmsg *nlmsg,
- 	rta = NLMSG_TAIL(nlmsg->nlmsghdr);
- 	rta->rta_type = attr;
- 	rta->rta_len = rtalen;
--	memcpy(RTA_DATA(rta), data, len);
-+	if (data && len)
-+		memcpy(RTA_DATA(rta), data, len);
- 	nlmsg->nlmsghdr->nlmsg_len = tlen;
- 	return 0;
- }
diff --git a/utils/lxc/patches/002-compile.patch b/utils/lxc/patches/002-compile.patch
deleted file mode 100644
index 9a98777..0000000
--- a/utils/lxc/patches/002-compile.patch
+++ /dev/null
@@ -1,10 +0,0 @@
---- a/src/lxc/storage/aufs.h
-+++ b/src/lxc/storage/aufs.h
-@@ -24,7 +24,6 @@
- #ifndef __LXC_AUFS_H
- #define __LXC_AUFS_H
- 
--#define _GNU_SOURCE
- #include <stdbool.h>
- #include <stdio.h>
- #include <stdint.h>
diff --git a/utils/lxc/patches/003-compile.patch b/utils/lxc/patches/003-compile.patch
deleted file mode 100644
index b26b78d..0000000
--- a/utils/lxc/patches/003-compile.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/src/lxc/confile_utils.c
-+++ b/src/lxc/confile_utils.c
-@@ -677,7 +677,7 @@
- 	char *endptr = NULL;
- 
- 	if (strncmp(*value, "unlimited", sizeof("unlimited") - 1) == 0) {
--		*res = RLIM_INFINITY;
-+		*res = (unsigned long)RLIM_INFINITY;
- 		*value += sizeof("unlimited") - 1;
- 		return true;
- 	}
diff --git a/utils/lxc/patches/010-compile.patch b/utils/lxc/patches/010-compile.patch
deleted file mode 100644
index 903e4cd..0000000
--- a/utils/lxc/patches/010-compile.patch
+++ /dev/null
@@ -1,37 +0,0 @@
---- a/configure.ac
-+++ b/configure.ac
-@@ -47,34 +47,6 @@ AC_GNU_SOURCE
- LT_INIT
- AC_SUBST([LIBTOOL_DEPS])
- 
--# Detect the distribution. This is used for the default configuration and
--# for some distro-specific build options.
--AC_MSG_CHECKING([host distribution])
--AC_ARG_WITH(distro, AS_HELP_STRING([--with-distro=DISTRO], [Specify the Linux distribution to target: One of redhat, oracle, centos, fedora, suse, gentoo, debian, arch, slackware, plamo, paldo, openmandriva, pardus, sparclinux, altlinux.]))
--if type lsb_release >/dev/null 2>&1 && test "z$with_distro" = "z"; then
--	with_distro=`lsb_release -is`
--fi
--if test "z$with_distro" = "z"; then
--	AC_CHECK_FILE(/etc/redhat-release,with_distro="redhat")
--	AC_CHECK_FILE(/etc/oracle-release,with_distro="oracle")
--	AC_CHECK_FILE(/etc/sparclinux-release,with_distro="sparclinux")
--	AC_CHECK_FILE(/etc/centos-release,with_distro="centos")
--	AC_CHECK_FILE(/etc/fedora-release,with_distro="fedora")
--	AC_CHECK_FILE(/etc/SuSE-release,with_distro="suse")
--	AC_CHECK_FILE(/etc/gentoo-release,with_distro="gentoo")
--	AC_CHECK_FILE(/etc/debian_version,with_distro="debian")
--	AC_CHECK_FILE(/etc/arch-release,with_distro="arch")
--	AC_CHECK_FILE(/etc/slackware-version,with_distro="slackware")
--	AC_CHECK_FILE(/etc/plamo-version,with_distro="plamo")
--	AC_CHECK_FILE(/etc/frugalware-release,with_distro="frugalware")
--	AC_CHECK_FILE(/etc/mandrakelinux-release, with_distro="openmandriva")
--	AC_CHECK_FILE(/etc/mandriva-release,with_distro="openmandriva")
--	AC_CHECK_FILE(/etc/pardus-release,with_distro="pardus")
--	AC_CHECK_FILE(/etc/altlinux-release,with_distro="altlinux")
--	AC_CHECK_FILE(/etc/pld-release,with_distro="pld")
--fi
--with_distro=`echo ${with_distro} | tr '[[:upper:]]' '[[:lower:]]'`
--
- if test "z$with_distro" = "zforsparc"; then
- 	with_distro="sparclinux"
- fi
diff --git a/utils/lxc/patches/020-lxc-checkconfig.patch b/utils/lxc/patches/020-lxc-checkconfig.patch
index 0e644ea..79fb682 100644
--- a/utils/lxc/patches/020-lxc-checkconfig.patch
+++ b/utils/lxc/patches/020-lxc-checkconfig.patch
@@ -1,5 +1,5 @@
---- a/src/lxc/tools/lxc-checkconfig.in
-+++ b/src/lxc/tools/lxc-checkconfig.in
+--- a/src/lxc/cmd/lxc-checkconfig.in
++++ b/src/lxc/cmd/lxc-checkconfig.in
 @@ -3,6 +3,17 @@
  # Allow environment variables to override config
  : ${CONFIG:=/proc/config.gz}
diff --git a/utils/lxc/patches/025-remove-unsupported-option.patch b/utils/lxc/patches/025-remove-unsupported-option.patch
index b208708..4e7b584 100644
--- a/utils/lxc/patches/025-remove-unsupported-option.patch
+++ b/utils/lxc/patches/025-remove-unsupported-option.patch
@@ -1,15 +1,17 @@
---- a/templates/lxc-download.in
-+++ b/templates/lxc-download.in
-@@ -505,20 +505,7 @@ fi
+Index: lxc-3.0.3/templates/lxc-download.in
+===================================================================
+--- lxc-3.0.3.orig/templates/lxc-download.in
++++ lxc-3.0.3/templates/lxc-download.in
+@@ -500,20 +500,7 @@ fi
  # Unpack the rootfs
  echo "Unpacking the rootfs"
  
 -EXCLUDES=""
 -excludelist=$(relevant_file excludes)
 -if [ -f "${excludelist}" ]; then
--    while read -r line; do
--        EXCLUDES="${EXCLUDES} --exclude=${line}"
--    done < "${excludelist}"
+-  while read -r line; do
+-    EXCLUDES="${EXCLUDES} --exclude=${line}"
+-  done < "${excludelist}"
 -fi
 -
 -# Do not surround ${EXCLUDES} by quotes. This does not work. The solution could
@@ -17,8 +19,8 @@
 -# is to use a function wrapper, but the latter can't be used here as the args
 -# are dynamic. We thus need to ignore the warning brought by shellcheck.
 -# shellcheck disable=SC2086
--tar  --anchored ${EXCLUDES} --numeric-owner -xpJf \
-+tar --numeric-owner -xpJf \
-     "${LXC_CACHE_PATH}/rootfs.tar.xz" -C "${LXC_ROOTFS}"
+-tar  --anchored ${EXCLUDES} --numeric-owner -xpJf "${LXC_CACHE_PATH}/rootfs.tar.xz" -C "${LXC_ROOTFS}"
++tar --numeric-owner -xpJf "${LXC_CACHE_PATH}/rootfs.tar.xz" -C "${LXC_ROOTFS}"
  
  mkdir -p "${LXC_ROOTFS}/dev/pts/"
+ 
diff --git a/utils/lxc/patches/030-prlimit.patch b/utils/lxc/patches/030-prlimit.patch
deleted file mode 100644
index 88f17aa..0000000
--- a/utils/lxc/patches/030-prlimit.patch
+++ /dev/null
@@ -1,95 +0,0 @@
-From f48b5fd8ab03c200eaf5e3a9b03bcd01b2659cf3 Mon Sep 17 00:00:00 2001
-From: Fabrice Fontaine <fontaine.fabrice@gmail.com>
-Date: Thu, 2 Nov 2017 16:00:33 +0100
-Subject: [PATCH] Fix compilation on toolchain without prlimit
-
-Some toolchains which are not bionic like uclibc does not support
-prlimit or prlimit64. In this case, return an error.
-Moreover, if prlimit64 is available, use lxc implementation of prlimit.
-
-Signed-off-by: Fabrice Fontaine <fontaine.fabrice@gmail.com>
----
- configure.ac        |  4 ++++
- src/lxc/Makefile.am |  6 ++++++
- src/lxc/conf.c      | 12 +++++++++---
- 3 files changed, 19 insertions(+), 3 deletions(-)
-
-diff --git a/configure.ac b/configure.ac
-index 642b78e7e1..63df7466cb 100644
---- a/configure.ac
-+++ b/configure.ac
-@@ -643,6 +643,10 @@ AC_CHECK_FUNCS([prlimit],
- 	AM_CONDITIONAL(HAVE_PRLIMIT, true)
- 	AC_DEFINE(HAVE_PRLIMIT,1,[Have prlimit]),
- 	AM_CONDITIONAL(HAVE_PRLIMIT, false))
-+AC_CHECK_FUNCS([prlimit64],
-+	AM_CONDITIONAL(HAVE_PRLIMIT64, true)
-+	AC_DEFINE(HAVE_PRLIMIT64,1,[Have prlimit64]),
-+	AM_CONDITIONAL(HAVE_PRLIMIT64, false))
- 
- # Check for some libraries
- AC_SEARCH_LIBS(sem_open, [rt pthread])
-diff --git a/src/lxc/Makefile.am b/src/lxc/Makefile.am
-index fff32ae4f3..8f0c11ecae 100644
---- a/src/lxc/Makefile.am
-+++ b/src/lxc/Makefile.am
-@@ -45,7 +45,10 @@ noinst_HEADERS += \
- 	../include/ifaddrs.h \
- 	../include/openpty.h \
- 	../include/lxcmntent.h
-+endif
-+
- if !HAVE_PRLIMIT
-+if HAVE_PRLIMIT64
- noinst_HEADERS += ../include/prlimit.h
- endif
- endif
-@@ -142,7 +145,10 @@ liblxc_la_SOURCES += \
- 	../include/ifaddrs.c ../include/ifaddrs.h \
- 	../include/openpty.c ../include/openpty.h \
- 	../include/lxcmntent.c ../include/lxcmntent.h
-+endif
-+
- if !HAVE_PRLIMIT
-+if HAVE_PRLIMIT64
- liblxc_la_SOURCES += ../include/prlimit.c ../include/prlimit.h
- endif
- endif
-diff --git a/src/lxc/conf.c b/src/lxc/conf.c
-index 44d9784303..8a66f2d02c 100644
---- a/src/lxc/conf.c
-+++ b/src/lxc/conf.c
-@@ -100,13 +100,14 @@
- 
- #if IS_BIONIC
- #include <../include/lxcmntent.h>
--#ifndef HAVE_PRLIMIT
--#include <../include/prlimit.h>
--#endif
- #else
- #include <mntent.h>
- #endif
- 
-+#if !defined(HAVE_PRLIMIT) && defined(HAVE_PRLIMIT64)
-+#include <../include/prlimit.h>
-+#endif
-+
- lxc_log_define(lxc_conf, lxc);
- 
- #if HAVE_LIBCAP
-@@ -2457,10 +2458,15 @@ int setup_resource_limits(struct lxc_list *limits, pid_t pid) {
- 			return -1;
- 		}
- 
-+#if HAVE_PRLIMIT || HAVE_PRLIMIT64
- 		if (prlimit(pid, resid, &lim->limit, NULL) != 0) {
- 			ERROR("failed to set limit %s: %s", lim->resource, strerror(errno));
- 			return -1;
- 		}
-+#else
-+		ERROR("Cannot set limit %s as prlimit is missing", lim->resource);
-+		return -1;
-+#endif
- 	}
- 	return 0;
- }
diff --git a/utils/lxc/patches/030-turris-servers.patch b/utils/lxc/patches/030-turris-servers.patch
index a674b3f..0f351ea 100644
--- a/utils/lxc/patches/030-turris-servers.patch
+++ b/utils/lxc/patches/030-turris-servers.patch
@@ -8,9 +8,9 @@ Index: lxc-2.1.1/config/etc/default.conf.unknown
 +lxc.net.0.link = br-lan
 +lxc.net.0.flags = up
 +lxc.net.0.name = eth0
-+# Debian workaround
-+lxc.tty.max = 4
-+lxc.pty.max = 1024
++# Some workarounds
++lxc.include = /usr/share/lxc/config/common.conf
++lxc.hook.start-host = /usr/share/lxc/hooks/systemd-workaround
 +# Template to generate fixed MAC address
 +lxc.net.0.hwaddr = x2:xx:xx:xx:xx:xx
 Index: lxc-2.1.1/templates/lxc-download.in
diff --git a/utils/lxc/patches/040-fix-CVE-2019-5736.patch b/utils/lxc/patches/040-fix-CVE-2019-5736.patch
new file mode 100644
index 0000000..d6cc71c
--- /dev/null
+++ b/utils/lxc/patches/040-fix-CVE-2019-5736.patch
@@ -0,0 +1,398 @@
+From 113a0557d7651385d30e181a23c8e68e696ad67f Mon Sep 17 00:00:00 2001
+From: Christian Brauner <christian.brauner@ubuntu.com>
+Date: Sat, 26 Jan 2019 01:19:29 +0100
+Subject: [PATCH] CVE-2019-5736 (runC): rexec callers as memfd
+MIME-Version: 1.0
+Content-Type: text/plain; charset=UTF-8
+Content-Transfer-Encoding: 8bit
+
+Adam Iwaniuk and Borys Popławski discovered that an attacker can compromise the
+runC host binary from inside a privileged runC container. As a result, this
+could be exploited to gain root access on the host. runC is used as the default
+runtime for containers with Docker, containerd, Podman, and CRI-O.
+
+The attack can be made when attaching to a running container or when starting a
+container running a specially crafted image.  For example, when runC attaches
+to a container the attacker can trick it into executing itself. This could be
+done by replacing the target binary inside the container with a custom binary
+pointing back at the runC binary itself. As an example, if the target binary
+was /bin/bash, this could be replaced with an executable script specifying the
+interpreter path #!/proc/self/exe (/proc/self/exec is a symbolic link created
+by the kernel for every process which points to the binary that was executed
+for that process). As such when /bin/bash is executed inside the container,
+instead the target of /proc/self/exe will be executed - which will point to the
+runc binary on the host. The attacker can then proceed to write to the target
+of /proc/self/exe to try and overwrite the runC binary on the host. However in
+general, this will not succeed as the kernel will not permit it to be
+overwritten whilst runC is executing. To overcome this, the attacker can
+instead open a file descriptor to /proc/self/exe using the O_PATH flag and then
+proceed to reopen the binary as O_WRONLY through /proc/self/fd/<nr> and try to
+write to it in a busy loop from a separate process. Ultimately it will succeed
+when the runC binary exits. After this the runC binary is compromised and can
+be used to attack other containers or the host itself.
+
+This attack is only possible with privileged containers since it requires root
+privilege on the host to overwrite the runC binary. Unprivileged containers
+with a non-identity ID mapping do not have the permission to write to the host
+binary and therefore are unaffected by this attack.
+
+LXC is also impacted in a similar manner by this vulnerability, however as the
+LXC project considers privileged containers to be unsafe no CVE has been
+assigned for this issue for LXC. Quoting from the
+https://linuxcontainers.org/lxc/security/ project's Security information page:
+
+"As privileged containers are considered unsafe, we typically will not consider
+new container escape exploits to be security issues worthy of a CVE and quick
+fix. We will however try to mitigate those issues so that accidental damage to
+the host is prevented."
+
+To prevent this attack, LXC has been patched to create a temporary copy of the
+calling binary itself when it starts or attaches to containers. To do this LXC
+creates an anonymous, in-memory file using the memfd_create() system call and
+copies itself into the temporary in-memory file, which is then sealed to
+prevent further modifications. LXC then executes this sealed, in-memory file
+instead of the original on-disk binary. Any compromising write operations from
+a privileged container to the host LXC binary will then write to the temporary
+in-memory binary and not to the host binary on-disk, preserving the integrity
+of the host LXC binary. Also as the temporary, in-memory LXC binary is sealed,
+writes to this will also fail.
+
+Note: memfd_create() was added to the Linux kernel in the 3.17 release.
+
+Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
+Co-Developed-by: Aleksa Sarai <asarai@suse.de>
+Acked-by: Serge Hallyn <serge@hallyn.com>
+---
+ configure.ac               |  12 +++
+ src/lxc/Makefile.am        |   4 +
+ src/lxc/file_utils.c       |  41 ++++++++-
+ src/lxc/file_utils.h       |   1 +
+ src/lxc/rexec.c            | 181 +++++++++++++++++++++++++++++++++++++
+ src/lxc/syscall_wrappers.h |  14 +++
+ 6 files changed, 252 insertions(+), 1 deletion(-)
+ create mode 100644 src/lxc/rexec.c
+
+diff --git a/configure.ac b/configure.ac
+index 950c8dde5f..631e6070dd 100644
+--- a/configure.ac
++++ b/configure.ac
+@@ -706,6 +706,17 @@ AC_ARG_ENABLE([thread-safety],
+ 	[], [enable_thread_safety=yes])
+ AM_CONDITIONAL([ENFORCE_THREAD_SAFETY], [test "x$enable_thread_safety" = "xyes"])
+ 
++AC_ARG_ENABLE([memfd-rexec],
++	[AC_HELP_STRING([--enable-memfd-rexec], [enforce liblxc as a memfd to protect against certain symlink attacks [default=yes]])],
++	[], [enable_memfd_rexec=yes])
++AM_CONDITIONAL([ENFORCE_MEMFD_REXEC], [test "x$enable_memfd_rexec" = "xyes"])
++if test "x$enable_memfd_rexec" = "xyes"; then
++	AC_DEFINE([ENFORCE_MEMFD_REXEC], 1, [Rexec liblxc as memfd])
++	AC_MSG_RESULT([yes])
++else
++	AC_MSG_RESULT([no])
++fi
++
+ # Files requiring some variable expansion
+ AC_CONFIG_FILES([
+ 	Makefile
+@@ -934,6 +945,7 @@ Security features:
+  - Linux capabilities: $enable_capabilities
+  - seccomp: $enable_seccomp
+  - SELinux: $enable_selinux
++ - memfd rexec: $enable_memfd_rexec
+ 
+ PAM:
+  - PAM module: $enable_pam
+diff --git a/src/lxc/Makefile.am b/src/lxc/Makefile.am
+index 08e2fab6d1..8bbfdaf8f5 100644
+--- a/src/lxc/Makefile.am
++++ b/src/lxc/Makefile.am
+@@ -173,6 +173,10 @@ if !HAVE_STRLCAT
+ liblxc_la_SOURCES += ../include/strlcat.c ../include/strlcat.h
+ endif
+ 
++if ENFORCE_MEMFD_REXEC
++liblxc_la_SOURCES += rexec.c
++endif
++
+ AM_CFLAGS = -DLXCROOTFSMOUNT=\"$(LXCROOTFSMOUNT)\" \
+ 	    -DLXCPATH=\"$(LXCPATH)\" \
+ 	    -DLXC_GLOBAL_CONF=\"$(LXC_GLOBAL_CONF)\" \
+diff --git a/src/lxc/file_utils.c b/src/lxc/file_utils.c
+index f89aa638d1..930fd738a9 100644
+--- a/src/lxc/file_utils.c
++++ b/src/lxc/file_utils.c
+@@ -31,7 +31,7 @@
+ #include "config.h"
+ #include "file_utils.h"
+ #include "macro.h"
+-#include "string.h"
++#include "string_utils.h"
+ 
+ int lxc_write_to_file(const char *filename, const void *buf, size_t count,
+ 		      bool add_newline, mode_t mode)
+@@ -327,3 +327,42 @@ ssize_t lxc_sendfile_nointr(int out_fd, int in_fd, off_t *offset, size_t count)
+ 
+ 	return ret;
+ }
++
++char *file_to_buf(char *path, size_t *length)
++{
++	int fd;
++	char buf[PATH_MAX];
++	char *copy = NULL;
++
++	if (!length)
++		return NULL;
++
++	fd = open(path, O_RDONLY | O_CLOEXEC);
++	if (fd < 0)
++		return NULL;
++
++	*length = 0;
++	for (;;) {
++		int n;
++		char *old = copy;
++
++		n = lxc_read_nointr(fd, buf, sizeof(buf));
++		if (n < 0)
++			goto on_error;
++		if (!n)
++			break;
++
++		copy = must_realloc(old, (*length + n) * sizeof(*old));
++		memcpy(copy + *length, buf, n);
++		*length += n;
++	}
++
++	close(fd);
++	return copy;
++
++on_error:
++	close(fd);
++	free(copy);
++
++	return NULL;
++}
+diff --git a/src/lxc/file_utils.h b/src/lxc/file_utils.h
+index 6361557a0e..518a61af32 100644
+--- a/src/lxc/file_utils.h
++++ b/src/lxc/file_utils.h
+@@ -55,5 +55,6 @@ extern bool is_fs_type(const struct statfs *fs, fs_type_magic magic_val);
+ extern FILE *fopen_cloexec(const char *path, const char *mode);
+ extern ssize_t lxc_sendfile_nointr(int out_fd, int in_fd, off_t *offset,
+ 				   size_t count);
++extern char *file_to_buf(char *path, size_t *length);
+ 
+ #endif /* __LXC_FILE_UTILS_H */
+diff --git a/src/lxc/rexec.c b/src/lxc/rexec.c
+new file mode 100644
+index 0000000000..396bd617f0
+--- /dev/null
++++ b/src/lxc/rexec.c
+@@ -0,0 +1,181 @@
++/* liblxcapi
++ *
++ * Copyright © 2019 Christian Brauner <christian.brauner@ubuntu.com>.
++ * Copyright © 2019 Canonical Ltd.
++ *
++ * This program is free software; you can redistribute it and/or modify
++ * it under the terms of the GNU General Public License version 2, as
++ * published by the Free Software Foundation.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License along
++ * with this program; if not, write to the Free Software Foundation, Inc.,
++ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
++ */
++
++#ifndef _GNU_SOURCE
++#define _GNU_SOURCE 1
++#endif
++#include <errno.h>
++#include <stdio.h>
++#include <stdlib.h>
++#include <string.h>
++
++#include "config.h"
++#include "file_utils.h"
++#include "raw_syscalls.h"
++#include "string_utils.h"
++#include "syscall_wrappers.h"
++
++#define LXC_MEMFD_REXEC_SEALS \
++	(F_SEAL_SEAL | F_SEAL_SHRINK | F_SEAL_GROW | F_SEAL_WRITE)
++
++static int push_vargs(char *data, int data_length, char ***output)
++{
++	int num = 0;
++	char *cur = data;
++
++	if (!data || *output)
++		return -1;
++
++	*output = must_realloc(NULL, sizeof(**output));
++
++	while (cur < data + data_length) {
++		num++;
++		*output = must_realloc(*output, (num + 1) * sizeof(**output));
++
++		(*output)[num - 1] = cur;
++		cur += strlen(cur) + 1;
++	}
++	(*output)[num] = NULL;
++	return num;
++}
++
++static int parse_exec_params(char ***argv, char ***envp)
++{
++	int ret;
++	char *cmdline = NULL, *env = NULL;
++	size_t cmdline_size, env_size;
++
++	cmdline = file_to_buf("/proc/self/cmdline", &cmdline_size);
++	if (!cmdline)
++		goto on_error;
++
++	env = file_to_buf("/proc/self/environ", &env_size);
++	if (!env)
++		goto on_error;
++
++	ret = push_vargs(cmdline, cmdline_size, argv);
++	if (ret <= 0)
++		goto on_error;
++
++	ret = push_vargs(env, env_size, envp);
++	if (ret <= 0)
++		goto on_error;
++
++	return 0;
++
++on_error:
++	free(env);
++	free(cmdline);
++
++	return -1;
++}
++
++static int is_memfd(void)
++{
++	int fd, saved_errno, seals;
++
++	fd = open("/proc/self/exe", O_RDONLY | O_CLOEXEC);
++	if (fd < 0)
++		return -ENOTRECOVERABLE;
++
++	seals = fcntl(fd, F_GET_SEALS);
++	saved_errno = errno;
++	close(fd);
++	errno = saved_errno;
++	if (seals < 0)
++		return -EINVAL;
++
++	return seals == LXC_MEMFD_REXEC_SEALS;
++}
++
++static void lxc_rexec_as_memfd(char **argv, char **envp, const char *memfd_name)
++{
++	int saved_errno;
++	ssize_t bytes_sent;
++	int fd = -1, memfd = -1;
++
++	memfd = memfd_create(memfd_name, MFD_ALLOW_SEALING | MFD_CLOEXEC);
++	if (memfd < 0)
++		return;
++
++	fd = open("/proc/self/exe", O_RDONLY | O_CLOEXEC);
++	if (fd < 0)
++		goto on_error;
++
++	/* sendfile() handles up to 2GB. */
++	bytes_sent = lxc_sendfile_nointr(memfd, fd, NULL, LXC_SENDFILE_MAX);
++	saved_errno = errno;
++	close(fd);
++	errno = saved_errno;
++	if (bytes_sent < 0)
++		goto on_error;
++
++	if (fcntl(memfd, F_ADD_SEALS, LXC_MEMFD_REXEC_SEALS))
++		goto on_error;
++
++	fexecve(memfd, argv, envp);
++
++on_error:
++	saved_errno = errno;
++	close(memfd);
++	errno = saved_errno;
++}
++
++static int lxc_rexec(const char *memfd_name)
++{
++	int ret;
++	char **argv = NULL, **envp = NULL;
++
++	ret = is_memfd();
++	if (ret < 0 && ret == -ENOTRECOVERABLE) {
++		fprintf(stderr,
++			"%s - Failed to determine whether this is a memfd\n",
++			strerror(errno));
++		return -1;
++	} else if (ret > 0) {
++		return 0;
++	}
++
++	ret = parse_exec_params(&argv, &envp);
++	if (ret < 0) {
++		fprintf(stderr,
++			"%s - Failed to parse command line parameters\n",
++			strerror(errno));
++		return -1;
++	}
++
++	lxc_rexec_as_memfd(argv, envp, memfd_name);
++	fprintf(stderr, "%s - Failed to rexec as memfd\n", strerror(errno));
++	return -1;
++}
++
++/**
++ * This function will copy any binary that calls liblxc into a memory file and
++ * will use the memfd to rexecute the binary. This is done to prevent attacks
++ * through the /proc/self/exe symlink to corrupt the host binary when host and
++ * container are in the same user namespace or have set up an identity id
++ * mapping: CVE-2019-5736.
++ */
++__attribute__((constructor)) static void liblxc_rexec(void)
++{
++	if (lxc_rexec("liblxc")) {
++		fprintf(stderr, "Failed to re-execute liblxc via memory file descriptor\n");
++		_exit(EXIT_FAILURE);
++	}
++}
+diff --git a/src/lxc/syscall_wrappers.h b/src/lxc/syscall_wrappers.h
+index 42d94db288..dca4d1571f 100644
+--- a/src/lxc/syscall_wrappers.h
++++ b/src/lxc/syscall_wrappers.h
+@@ -58,6 +58,20 @@ static inline long __keyctl(int cmd, unsigned long arg2, unsigned long arg3,
+ #define keyctl __keyctl
+ #endif
+ 
++#ifndef F_LINUX_SPECIFIC_BASE
++#define F_LINUX_SPECIFIC_BASE 1024
++#endif
++#ifndef F_ADD_SEALS
++#define F_ADD_SEALS (F_LINUX_SPECIFIC_BASE + 9)
++#define F_GET_SEALS (F_LINUX_SPECIFIC_BASE + 10)
++#endif
++#ifndef F_SEAL_SEAL
++#define F_SEAL_SEAL 0x0001
++#define F_SEAL_SHRINK 0x0002
++#define F_SEAL_GROW 0x0004
++#define F_SEAL_WRITE 0x0008
++#endif
++
+ #ifndef HAVE_MEMFD_CREATE
+ static inline int memfd_create(const char *name, unsigned int flags) {
+ 	#ifndef __NR_memfd_create
-- 
2.26.0

